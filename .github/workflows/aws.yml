name: Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Compose
      run: |
        sudo apt-get -y update
        sudo apt-get -y install docker-compose
      if: success()
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nodenginx
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker-compose build
        docker-compose push
      if: success()
      
    - name: Create ECS Task Definition
      run: |
         task_definition=$(aws ecs register-task-definition \
           --family docker-task \
           --container-definitions '[{"name":"docker-container","image":"158543191340.dkr.ecr.ap-southeast-1.amazonaws.com/nodenginx:latest","cpu":256,"memory":512,"portMappings":[{"containerPort":80,"hostPort":80}]}]' \
           --requires-compatibilities FARGATE \
           --cpu '256' \
           --memory '512' \
           --network-mode awsvpc \
           --execution-role-arn arn:aws:iam::158543191340:role/ecsTaskExecutionRole \
           --region ${{ secrets.AWS_REGION }} \
           --query 'taskDefinition.taskDefinitionArn' \
           --output text)
         echo "::set-output name=task_definition::$task_definition"
      id: create-task
      if: success()

    - name: Create ECS Service
      run: |
          service=$(aws ecs create-service \
            --cluster Dev-Cluster \
            --service-name nginx03 \
            --task-definition docker-task \
            --launch-type FARGATE \
            --region ${{ secrets.AWS_REGION }} \
            --query 'service.serviceArn' \
            --output text)
          echo "::set-output name=service_arn::$service"
      id: create-service
      if: success()



