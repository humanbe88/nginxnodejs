name: Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Compose
      run: |
        sudo apt-get -y update
        sudo apt-get -y install docker-compose
      if: success()
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nodenginx
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker-compose build
        echo ${{ secrets.AWS_SECRET_ACCESS_KEY }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCESS_KEY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        docker-compose push
      if: success()
      
    - name: Create ECS Task Definition for Node.js App
      run: |
        task_definition=$(aws ecs register-task-definition --family my-app-nodejs --container-definitions '[{"name":"my-app-nodejs","image":"'"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app-nodejs:latest"'","cpu":256,"memoryReservation":512}]' --requires-compatibilities EC2 FARGATE --network-mode bridge --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole --region ${{ secrets.AWS_REGION }} --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "::set-output name=task_definition::$task_definition"
      id: create-task-definition
      if: success()

    - name: Create ECS Service
      run: |
        task_definition_arn=$(echo ${{ steps.create-task-definition.outputs.task_definition }})
        service=$(aws ecs create-service --cluster my-cluster --service-name my-app-service --launch-type FARGATE --task-definition $task_definition_arn --desired-count 2 --region ${{ secrets.AWS_REGION }} --query 'service.serviceArn' --output text)
        echo "::set-output name=service::$service"
      id: create-service
      if: success()



